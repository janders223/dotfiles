#+TITLE: Doom
#+AUTHOR: janders223

* Doom
:PROPERTIES:
:header-args:emacs-lisp: :cache yes :results silent :comments link
:END:
** Headers

Each file starts with either turning off byte compiling or adding lexical binding.

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-

(doom!
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
;; -*- no-byte-compile: t; -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
** UI
*** core emacs
Menu bar mode seems to need to be enabled to get emacs working with yabai
Referenced from: https://github.com/koekeishiya/yabai/issues/86

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(menu-bar-mode t)
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/doom][doom core]]
Doom gets it's look from this module
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:ui
doom
#+END_SRC

However, I much prefer the Nord theme with the Hasklig font

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq
 doom-theme 'doom-nord
 doom-font (font-spec :family "Hasklig" :size 16)
 doom-big-font (font-spec :family "Hasklig" :size 24))
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/doom-dashboard][doom-dashboard]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
doom-dashboard
#+END_SRC

Set a fancy ass doom logo

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq fancy-splash-image "~/Dropbox/banner/doom.png")
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/modeline][modeline]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
modeline
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/hl-todo][hl-todo]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
hl-todo
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/ophints][ophints]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
ophints
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/popup][popup]]

  - +all Enables fallback rules to ensure all temporary/special buffers (whose name begins with a space or asterix) are treated as popups.
  - +defaults Enables reasonable default popup rules for a variety of buffers.

    #+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(popup +all +defaults)
    #+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/pretty-code][pretty-code]]

[[https://github.com/i-tu/Hasklig][Hasklig]] is Source Code Pro with ligatures

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(pretty-code +hasklig)
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/workspaces][workspaces]]

contain workspaces using [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]]

=keymap=

| command                           | key / ex command           | description                                                |
|-----------------------------------+----------------------------+------------------------------------------------------------|
| ~+workspace/new~                  | =SPC TAB n=                | Create a new, blank workspace                              |
| ~+workspace/display~              | =SPC TAB TAB=              | Display open workspaces in the mode-line                   |
| ~+workspace/load~                 | =SPC TAB l=                | Load a saved workspace into the current session            |
| ~+workspace/restore-last-session~ | =SPC TAB R=                | Restore last session                                       |
| ~+workspace/rename~               | =SPC TAB r=                | Rename the current workspace                               |
| ~+workspace/save~                 | =SPC TAB s=                | Save the current workspace to a file                       |
| ~+workspace/switch-to~            | =SPC TAB .=                | Switch to an open workspace                                |
| ~+workspace/other~                | =SPC TAB `=                | Switch to last workspace                                   |
| ~+workspace/switch-left~          | =SPC TAB [= / =[ w= / =gT= | Switch to previous workspace                               |
| ~+workspace/switch-right~         | =SPC TAB ]= / =] w= / =gt= | Switch to next workspace                                   |
| ~+workspace/delete~               | =SPC TAB d=                | Delete the current workspace                               |
| ~+workspace/kill-session~         | =SPC TAB x= / =:sclear=    | Clears the current session (kills all windows and buffers) |

#+BEGIN_SRC emacs-lisp
workspaces
#+END_SRC
** Completion
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/completion/company][company]]

=keymap=

By default, completion is triggered after a short idle period or with the
=C-SPC= key. While the popup is visible, the following keys are available:

| Keybind | Description                              |
|---------+------------------------------------------|
| =C-n=   | Go to next candidate                     |
| =C-p=   | Go to previous candidate                 |
| =C-j=   | (evil) Go to next candidate              |
| =C-k=   | (evil) Go to previous candidate          |
| =C-h=   | Display documentation (if available)     |
| =C-u=   | Move to previous page of candidates      |
| =C-d=   | Move to next page of candidates          |
| =C-s=   | Filter candidates                        |
| =C-S-s= | Search candidates with helm/ivy          |
| =C-SPC= | Complete common                          |
| =TAB=   | Complete common or select next candidate |
| =S-TAB= | Select previous candidate                |

In the spirit of Vim's omni-completion, the following insert mode keybinds are
available to evil users to access specific company backends:

| Keybind   | Description                       |
|-----------+-----------------------------------|
| =C-x C-]= | Complete etags                    |
| =C-x C-f= | Complete file path                |
| =C-x C-k= | Complete from dictionary/keyword  |
| =C-x C-l= | Complete full line                |
| =C-x C-o= | Invoke complete-at-point function |
| =C-x C-n= | Complete next symbol at point     |
| =C-x C-p= | Complete previous symbol at point |
| =C-x C-s= | Complete snippet                  |
| =C-x s=   | Complete spelling suggestions     |

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:completion
company
#+END_SRC

** Editor
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/evil][evil]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:editor
(evil +everywhere)
#+END_SRC

When in evil mode everywhere, give me relative line numbers

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq display-line-numbers-type 'relative)
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/file-templates][file-templates]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
file-templates
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/fold][fold]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
fold
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/format][format]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(format +onsave)
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/editor/snippets][snippets]]
#+BEGIN_SRC emacs-lisp
snippets
#+END_SRC
*** narrow to region

I don't always narrow a region, but when I do, I don't need it to be disabled

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(put 'narrow-to-region 'disabled nil)
#+END_SRC

** Emacs
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/emacs/dired][dired]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:emacs
(dired +icons)
#+END_SRC

Force dired to find the =ls= executable that is installed by =nix= because it /isn't/ =gls=

Also, make it group directories first in the outp and use the following switches

| switch | description                                       |
|--------+---------------------------------------------------|
| v      | Force unedited printing of non-graphic characters |
| h      | When used with the -l option, use unit suffixes   |
| A      | List all entries except for . and ..              |
| F      | Display chars after denoting type                 |
| l      | List in long format                               |

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(after! dired
  (setq dired-listing-switches "-vhAFl --group-directories-first")
  (if-let (gls (executable-find "ls"))
      (setq insert-directory-program gls)))
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/emacs/ibuffer][ibuffer]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(ibuffer +icons)
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/emacs/undo][undo]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
undo
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/emacs/vc][vc]]

#+BEGIN_SRC emacs-lisp
vc
#+END_SRC
** Terminal
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/term/eshell][eshell]]

#+BEGIN_SRC emacs-lisp
:term
eshell
#+END_SRC
** Checkers
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/checkers/syntax][syntax]]
 
#+BEGIN_SRC emacs-lisp
:checkers
syntax
#+END_SRC
** Tools
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/debugger][debugger]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:tools
debugger
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/direnv][direnv]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
direnv
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/docker][docker]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(docker +lsp)
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/editorconfig][editorconfig]]
#+BEGIN_SRC emacs-lisp
editorconfig
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/eval][eval]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(eval +overlay)
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/lookup][lookup]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
lookup
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/lsp][lsp]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(lsp +peek)
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/macos][macos]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
macos
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/magit][magit]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(magit +forge)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(use-package! magit
  :config
  (setq magit-view-git-manual-method 'man))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(use-package! forge
  :config
  (add-to-list 'forge-alist
               '("gitlab.kroger.com"
                 "gitlab.kroger.com/api/v4"
                 "gitlab.kroger.com"
                 forge-gitlab-repository)))
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/pass][pass]]
#+BEGIN_SRC emacs-lisp
pass
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/pdf][pdf]]
#+BEGIN_SRC emacs-lisp
pdf
#+END_SRC

*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/terraform][terraform]]

#+BEGIN_SRC emacs-lisp
(terraform +lsp)
#+END_SRC
** Languages
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/emacs-lisp][emacs-lisp]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:lang
emacs-lisp
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/go][golang]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(go +lsp)
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/javascript][javascript]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(javascript +lsp)
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/json][json]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(json +lsp)
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/markdown][markdown]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
markdown
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/nix][nix]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
nix
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/org][org]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(org +hugo +roam)
#+end_src

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! ob-http)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! literate-calc-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! org-board
  :recipe (:host github :repo "scallywag/org-board"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq org-directory "~/Dropbox/org"
      org-ellipsis " ▼ ")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(use-package! org
  :init
  (global-set-key (kbd "C-c o") org-board-keymap)
  (global-set-key (kbd "C-c c") 'org-capture)
  :config
  (setq org-agenda-files '("~/Dropbox/org/gtd.org"
                           "~/Dropbox/org/todo.org"
                           "~/Dropbox/org/bread.org"
                           "~/Dropbox/org/reading.org")
        org-agenda-span 'day
        org-duration-format '((special . h:mm))
        org-agenda-start-on-weekday 1
        org-agenda-start-day nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)
  :hook
  (after-init . org-roam-mode)
  :config
  (setq org-roam-directory "~/Dropbox/org/roam/"))
#+END_SRC
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/rest][rest]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
rest
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/sh][sh]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(sh +lsp)
#+end_src
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/yaml][yaml]]
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
(yaml +lsp)
#+end_src

** Apps
*** [[https://github.com/hlissner/doom-emacs/tree/develop/modules/app/rss][elfeed]]

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:app
(rss +org)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! elfeed-goodies)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(use-package! elfeed
  :init
  (elfeed-goodies/setup)
  (map! :leader
        :prefix "o"
        :desc "elfeed" "n" #'elfeed))
#+END_SRC
** Config
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/init.el
:config
(default +bindings +smartparens))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(setq Info-additional-directory-list '("/run/current-system/sw/share/info")
      user-full-name "Jim Anders"
      user-mail-address "jimanders223@gmail.com"
      epa-file-select-keys t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/config.el
(load-file (concat doom-private-dir "private.el"))
#+END_SRC
